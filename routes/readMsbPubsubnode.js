/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'MsbPubsubnodeRead',
    Heading:'MsbPubsubnode',
    Serviceid:{label :'Serviceid'},
    Nodeid:{label :'Nodeid'},
    Leaf:{label :'Leaf'},
    Creationdate:{label :'Creationdate'},
    Modificationdate:{label :'Modificationdate'},
    Parent:{label :'Parent'},
    Deliverpayloads:{label :'Deliverpayloads'},
    Maxpayloadsize:{label :'Maxpayloadsize'},
    Persistitems:{label :'Persistitems'},
    Maxitems:{label :'Maxitems'},
    Notifyconfigchanges:{label :'Notifyconfigchanges'},
    Notifydelete:{label :'Notifydelete'},
    Notifyretract:{label :'Notifyretract'},
    Presencebased:{label :'Presencebased'},
    Senditemsubscribe:{label :'Senditemsubscribe'},
    Publishermodel:{label :'Publishermodel'},
    Subscriptionenabled:{label :'Subscriptionenabled'},
    Configsubscription:{label :'Configsubscription'},
    Accessmodel:{label :'Accessmodel'},
    Payloadtype:{label :'Payloadtype'},
    Bodyxslt:{label :'Bodyxslt'},
    Dataformxslt:{label :'Dataformxslt'},
    Creator:{label :'Creator'},
    Description:{label :'Description'},
    Language:{label :'Language'},
    Name:{label :'Name'},
    Replypolicy:{label :'Replypolicy'},
    Associationpolicy:{label :'Associationpolicy'},
    Maxleafnodes:{label :'Maxleafnodes'},
    MsbPubsubitem:{Heading:'MsbPubsubitem',
        Serviceid:{header:'Serviceid'},
        Nodeid:{header:'Nodeid'},
        Id:{header:'Id'},
        Jid:{header:'Jid'},
        Creationdate:{header:'Creationdate'},
        Payload:{header:'Payload'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readMsbPubsubnode?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readMsbPubsubnode = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbPubsubnode(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchMsbPubsubnode');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var msbPubsubitem = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbPubsubnode(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbPubsubnodeMsbPubsubitem(jsonObj,function(err,rows) {
                    jsonObj.msbPubsubitem = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('MsbPubsubnodeReadPage',parameter);
    }    
    Promise.all([readMsbPubsubnode,msbPubsubitem]).then(sendResult);
});

module.exports = router;
