/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'MsbMucserviceRead',
    Heading:'MsbMucservice',
    Serviceid:{label :'Serviceid'},
    Domain:{label :'Domain'},
    Subdomain:{label :'Subdomain'},
    Description:{label :'Description'},
    Ishidden:{label :'Ishidden'},
    MsbMucroom:{Heading:'MsbMucroom',
        Roomid:{header:'Roomid'},
        Serviceid:{header:'Serviceid'},
        Creationdate:{header:'Creationdate'},
        Modificationdate:{header:'Modificationdate'},
        Name:{header:'Name'},
        Naturalname:{header:'Naturalname'},
        Description:{header:'Description'},
        Lockeddate:{header:'Lockeddate'},
        Emptydate:{header:'Emptydate'},
        Canchangesubject:{header:'Canchangesubject'},
        Maxusers:{header:'Maxusers'},
        Publicroom:{header:'Publicroom'},
        Moderated:{header:'Moderated'},
        Membersonly:{header:'Membersonly'},
        Caninvite:{header:'Caninvite'},
        Roompassword:{header:'Roompassword'},
        Candiscoverjid:{header:'Candiscoverjid'},
        Logenabled:{header:'Logenabled'},
        Subject:{header:'Subject'},
        Rolestobroadcast:{header:'Rolestobroadcast'},
        Usereservednick:{header:'Usereservednick'},
        Canchangenick:{header:'Canchangenick'},
        Canregister:{header:'Canregister'},
        },
    MsbMucserviceprop:{Heading:'MsbMucserviceprop',
        Serviceid:{header:'Serviceid'},
        Name:{header:'Name'},
        Propvalue:{header:'Propvalue'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readMsbMucservice?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readMsbMucservice = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbMucservice(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchMsbMucservice');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var msbMucroom = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbMucservice(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbMucserviceMsbMucroom(jsonObj,function(err,rows) {
                    jsonObj.msbMucroom = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbMucserviceprop = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbMucservice(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbMucserviceMsbMucserviceprop(jsonObj,function(err,rows) {
                    jsonObj.msbMucserviceprop = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('MsbMucserviceReadPage',parameter);
    }    
    Promise.all([readMsbMucservice,msbMucroom,msbMucserviceprop]).then(sendResult);
});

module.exports = router;
