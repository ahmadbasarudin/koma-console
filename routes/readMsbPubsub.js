/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'MsbPubsubRead',
    Heading:'MsbPubsub',
    Serviceid:{label :'Serviceid'},
    Protocol:{label :'Protocol'},
    Description:{label :'Description'},
    MsbPubsubnode:{Heading:'MsbPubsubnode',
        Serviceid:{header:'Serviceid'},
        Nodeid:{header:'Nodeid'},
        Leaf:{header:'Leaf'},
        Creationdate:{header:'Creationdate'},
        Modificationdate:{header:'Modificationdate'},
        Parent:{header:'Parent'},
        Deliverpayloads:{header:'Deliverpayloads'},
        Maxpayloadsize:{header:'Maxpayloadsize'},
        Persistitems:{header:'Persistitems'},
        Maxitems:{header:'Maxitems'},
        Notifyconfigchanges:{header:'Notifyconfigchanges'},
        Notifydelete:{header:'Notifydelete'},
        Notifyretract:{header:'Notifyretract'},
        Presencebased:{header:'Presencebased'},
        Senditemsubscribe:{header:'Senditemsubscribe'},
        Publishermodel:{header:'Publishermodel'},
        Subscriptionenabled:{header:'Subscriptionenabled'},
        Configsubscription:{header:'Configsubscription'},
        Accessmodel:{header:'Accessmodel'},
        Payloadtype:{header:'Payloadtype'},
        Bodyxslt:{header:'Bodyxslt'},
        Dataformxslt:{header:'Dataformxslt'},
        Creator:{header:'Creator'},
        Description:{header:'Description'},
        Language:{header:'Language'},
        Name:{header:'Name'},
        Replypolicy:{header:'Replypolicy'},
        Associationpolicy:{header:'Associationpolicy'},
        Maxleafnodes:{header:'Maxleafnodes'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readMsbPubsub?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readMsbPubsub = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbPubsub(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchMsbPubsub');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var msbPubsubnode = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbPubsub(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbPubsubMsbPubsubnode(jsonObj,function(err,rows) {
                    jsonObj.msbPubsubnode = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('MsbPubsubReadPage',parameter);
    }    
    Promise.all([readMsbPubsub,msbPubsubnode]).then(sendResult);
});

module.exports = router;
