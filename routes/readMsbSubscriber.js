/*
 * script route generated by KOMA
 * @author : Yan Yan Purdiansah
 */    
var express = require('express');
var router = express.Router();
var dateFormat = require('dateformat');    
var database = require('./dao');
var dao = new database.Dao();    
var sessionChecker = require('./security');
var appresource = {
    Title:'MsbSubscriberRead',
    Heading:'MsbSubscriber',
    Subscriber:{label :'Subscriber'},
    Password:{label :'Password'},
    Name:{label :'Name'},
    Email:{label :'Email'},
    Creationdate:{label :'Creationdate'},
    Modificationdate:{label :'Modificationdate'},
    Subtype:{label :'Subtype'},
    Account:{label :'Account'},
    Userkey:{label :'Userkey'},
    MsbMucmember:{Heading:'MsbMucmember',
        Roomid:{header:'Roomid'},
        Jid:{header:'Jid'},
        Subscriber:{header:'Subscriber'},
        Nickname:{header:'Nickname'},
        Firstname:{header:'Firstname'},
        Lastname:{header:'Lastname'},
        Url:{header:'Url'},
        Email:{header:'Email'},
        Faqentry:{header:'Faqentry'},
        },
    MsbOffline:{Heading:'MsbOffline',
        Subscriber:{header:'Subscriber'},
        Messageid:{header:'Messageid'},
        Creationdate:{header:'Creationdate'},
        Messagesize:{header:'Messagesize'},
        Stanza:{header:'Stanza'},
        },
    MsbPresence:{Heading:'MsbPresence',
        Subscriber:{header:'Subscriber'},
        Offlinepresence:{header:'Offlinepresence'},
        Offlinedate:{header:'Offlinedate'},
        },
    MsbRevenue:{Heading:'MsbRevenue',
        Subscriber:{header:'Subscriber'},
        Account:{header:'Account'},
        From:{header:'From'},
        To:{header:'To'},
        Debit:{header:'Debit'},
        Credit:{header:'Credit'},
        Description:{header:'Description'},
        Activity:{header:'Activity'},
        Datetime:{header:'Datetime'},
        Status:{header:'Status'},
        },
    MsbRoster:{Heading:'MsbRoster',
        Rosterid:{header:'Rosterid'},
        Subscriber:{header:'Subscriber'},
        Jid:{header:'Jid'},
        Sub:{header:'Sub'},
        Ask:{header:'Ask'},
        Recv:{header:'Recv'},
        Nick:{header:'Nick'},
        Key:{header:'Key'},
        },
    MsbSession:{Heading:'MsbSession',
        Sessionid:{header:'Sessionid'},
        Subscriber:{header:'Subscriber'},
        Domain:{header:'Domain'},
        Ipaddress:{header:'Ipaddress'},
        Ipport:{header:'Ipport'},
        Protocol:{header:'Protocol'},
        Starttime:{header:'Starttime'},
        Endtime:{header:'Endtime'},
        Resource:{header:'Resource'},
        Presence:{header:'Presence'},
        Status:{header:'Status'},
        },
    MsbSubscriberprop:{Heading:'MsbSubscriberprop',
        Subscriber:{header:'Subscriber'},
        Name:{header:'Name'},
        Propvalue:{header:'Propvalue'},
        },
    MsbTraffic:{Heading:'MsbTraffic',
        Subscriber:{header:'Subscriber'},
        Account:{header:'Account'},
        From:{header:'From'},
        To:{header:'To'},
        Counter:{header:'Counter'},
        Type:{header:'Type'},
        LastUpdate:{header:'LastUpdate'},
        Status:{header:'Status'},
        },
    MsbVcard:{Heading:'MsbVcard',
        Subscriber:{header:'Subscriber'},
        Vcard:{header:'Vcard'},
        },
    }

router.get('/', sessionChecker, function(req, res, next) {
    var jsonObj = req.query;
    jsonObj.rowid = 0;
    req.session.previouspath = 'readMsbSubscriber?'+req._parsedUrl.query;
    parameter = {
        session: req.session,
        cookies: req.cookies,
        resource: appresource,
        dateFormat: dateFormat,
    }
    var readMsbSubscriber = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                if(err) res.status(err.code).end();
                else{
                    if(rows[0]===undefined) res.redirect('/searchMsbSubscriber');
                    else{ 
                        jsonObj = rows[0];
                        resolve(jsonObj);
                    }
                }
            });
        },1000);
    });
    
    var msbMucmember = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbMucmember(jsonObj,function(err,rows) {
                    jsonObj.msbMucmember = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbOffline = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbOffline(jsonObj,function(err,rows) {
                    jsonObj.msbOffline = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbPresence = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbPresence(jsonObj,function(err,rows) {
                    jsonObj.msbPresence = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbRevenue = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbRevenue(jsonObj,function(err,rows) {
                    jsonObj.msbRevenue = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbRoster = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbRoster(jsonObj,function(err,rows) {
                    jsonObj.msbRoster = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbSession = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbSession(jsonObj,function(err,rows) {
                    jsonObj.msbSession = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbSubscriberprop = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbSubscriberprop(jsonObj,function(err,rows) {
                    jsonObj.msbSubscriberprop = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbTraffic = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbTraffic(jsonObj,function(err,rows) {
                    jsonObj.msbTraffic = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var msbVcard = new Promise((resolve, reject) => {
        setTimeout(() => {
            dao.readMsbSubscriber(jsonObj,function(err,rows) {
                jsonObj = rows[0];
                dao.readMsbSubscriberMsbVcard(jsonObj,function(err,rows) {
                    jsonObj.msbVcard = rows;
                    resolve(jsonObj);
                });
            });        
        },1000);
    });
    
    var sendResult = (results) => {
        console.log(jsonObj)
        parameter.record = jsonObj;        
        res.render('MsbSubscriberReadPage',parameter);
    }    
    Promise.all([readMsbSubscriber,msbMucmember,msbOffline,msbPresence,msbRevenue,msbRoster,msbSession,msbSubscriberprop,msbTraffic,msbVcard]).then(sendResult);
});

module.exports = router;
